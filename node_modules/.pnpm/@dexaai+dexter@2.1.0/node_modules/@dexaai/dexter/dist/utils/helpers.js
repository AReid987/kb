import { deepmerge as deepmergeInit } from '@fastify/deepmerge';
export const deepMergeImpl = deepmergeInit();
const deepMergeEventsImpl = deepmergeInit({
    // Note: this is not using a recursive deep merge since it isn't used for events.
    mergeArray: () => (a, b) => stableDedupe([...a, ...b]),
});
// Slightly custom deepMerge which handles `undefined` arguments as empty objects.
export function deepMerge(t1, t2) {
    return deepMergeImpl(t1 ?? {}, t2 ?? {});
}
// Slightly custom deepMerge which handles `undefined` arguments as empty objects
// and ensures that we remove duplicate event handlers.
export function mergeEvents(t1, t2) {
    return deepMergeEventsImpl(t1 ?? {}, t2 ?? {});
}
/** Dedupes the given array maintaining a stable order in the output array. */
function stableDedupe(input) {
    const seen = new Set();
    return input.filter((value) => {
        if (seen.has(value)) {
            return false;
        }
        seen.add(value);
        return true;
    });
}
/**
 * From `obj`, create a new object that does not include `keys`.
 *
 * @example
 * ```
 * omit({ a: 1, b: 2, c: 3 }, 'a', 'c') // { b: 2 }
 * ```
 */
export const omit = (obj, ...keys) => Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k)));
/**
 * From `obj`, create a new object that only includes `keys`.
 *
 * @example
 * ```
 * pick({ a: 1, b: 2, c: 3 }, 'a', 'c') // { a: 1, c: 3 }
 * ```
 */
export const pick = (obj, ...keys) => Object.fromEntries(Object.entries(obj).filter(([k]) => keys.includes(k)));
//# sourceMappingURL=helpers.js.map