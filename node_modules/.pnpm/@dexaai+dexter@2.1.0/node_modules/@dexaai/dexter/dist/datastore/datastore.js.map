{"version":3,"file":"datastore.js","sourceRoot":"","sources":["../../src/datastore/datastore.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Datastore } from './types.js';\nimport {\n  type CacheKey,\n  type CacheStorage,\n  defaultCacheKey,\n} from '../utils/cache.js';\nimport { mergeEvents } from '../utils/helpers.js';\n\nexport abstract class AbstractDatastore<\n  DocMeta extends Datastore.BaseMeta,\n  Filter extends Datastore.BaseFilter<DocMeta>,\n> {\n  protected abstract runQuery(\n    query: Datastore.Query<DocMeta, Filter>,\n    context?: Datastore.Ctx\n  ): Promise<Datastore.QueryResult<DocMeta>>;\n  abstract upsert(\n    docs: Datastore.Doc<DocMeta>[],\n    context?: Datastore.Ctx\n  ): Promise<void>;\n  abstract delete(docIds: string[]): Promise<void>;\n  abstract deleteAll(): Promise<void>;\n\n  /** Clones the datastore, optionally modifying it's config */\n  abstract extend<Args extends Datastore.Opts<DocMeta, Filter>>(\n    args?: Partial<Args>\n  ): this;\n\n  public abstract readonly datastoreType: Datastore.Type;\n  public abstract readonly datastoreProvider: Datastore.Provider;\n\n  protected readonly cacheKey: CacheKey<\n    Datastore.Query<DocMeta, Filter>,\n    string\n  >;\n  protected readonly cache?: CacheStorage<\n    string,\n    Datastore.QueryResult<DocMeta>\n  >;\n\n  public readonly contentKey: keyof DocMeta;\n  public readonly embeddingModel: any;\n  public readonly namespace?: string;\n  public readonly events: Datastore.Events<DocMeta, Filter>;\n  public readonly context: Datastore.Ctx;\n  public readonly debug: boolean;\n\n  constructor(args: Datastore.Opts<DocMeta, Filter>) {\n    this.namespace = args.namespace;\n    this.contentKey = args.contentKey;\n    this.embeddingModel = args.embeddingModel;\n    this.cacheKey = args.cacheKey ?? defaultCacheKey;\n    this.cache = args.cache;\n    this.context = args.context ?? {};\n    this.debug = args.debug ?? false;\n    this.events = mergeEvents(\n      args.events,\n      args.debug\n        ? {\n            onQueryStart: [console.debug],\n            onQueryComplete: [console.debug],\n            onError: [console.error],\n          }\n        : {}\n    );\n  }\n\n  async query(\n    query: Datastore.Query<DocMeta, Filter>,\n    context?: Datastore.Ctx\n  ): Promise<Datastore.QueryResult<DocMeta>> {\n    const start = Date.now();\n    const mergedContext = { ...this.context, ...context };\n\n    await Promise.allSettled(\n      this.events?.onQueryStart?.map((event) =>\n        Promise.resolve(\n          event({\n            timestamp: new Date().toISOString(),\n            datastoreType: this.datastoreType,\n            datastoreProvider: this.datastoreProvider,\n            query,\n            context: mergedContext,\n          })\n        )\n      ) ?? []\n    );\n\n    const cacheKey = await this.cacheKey(query);\n\n    // Return cached response if available\n    const cached = await Promise.resolve(this.cache?.get(cacheKey));\n    if (cached) {\n      await Promise.allSettled(\n        this.events?.onQueryComplete?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              datastoreType: this.datastoreType,\n              datastoreProvider: this.datastoreProvider,\n              query,\n              response: cached,\n              cached: true,\n              context: mergedContext,\n              latency: Date.now() - start,\n            })\n          )\n        ) ?? []\n      );\n      return {\n        ...cached,\n        cached: true,\n      };\n    }\n\n    try {\n      // Run the query\n      const response = await this.runQuery(query, context);\n\n      await Promise.allSettled(\n        this.events?.onQueryComplete?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              datastoreType: this.datastoreType,\n              datastoreProvider: this.datastoreProvider,\n              query,\n              response,\n              cached: false,\n              context: mergedContext,\n              latency: Date.now() - start,\n            })\n          )\n        ) ?? []\n      );\n\n      // Update the cache\n      await Promise.resolve(this.cache?.set(cacheKey, response));\n\n      return {\n        ...response,\n        cached: false,\n      };\n    } catch (error) {\n      await Promise.allSettled(\n        this.events?.onError?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              datastoreType: this.datastoreType,\n              datastoreProvider: this.datastoreProvider,\n              error,\n              context: mergedContext,\n            })\n          )\n        ) ?? []\n      );\n      throw error;\n    }\n  }\n}\n"]}