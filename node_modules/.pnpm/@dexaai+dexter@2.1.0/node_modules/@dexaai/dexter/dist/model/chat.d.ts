import type { PartialDeep } from 'type-fest';
import type { SetOptional } from 'type-fest';
import type { ModelArgs } from './model.js';
import type { Model } from './types.js';
import { AbstractModel } from './model.js';
import { type Prettify } from '../utils/helpers.js';
export type ChatModelArgs<CustomCtx extends Model.Ctx> = SetOptional<ModelArgs<Model.Chat.Client, Model.Chat.Config, Model.Chat.Run, Model.Chat.Response, CustomCtx>, 'client' | 'params'>;
export type PartialChatModelArgs<CustomCtx extends Model.Ctx> = Prettify<PartialDeep<Pick<ChatModelArgs<Partial<CustomCtx>>, 'params'>> & Partial<Omit<ChatModelArgs<Partial<CustomCtx>>, 'params'>>>;
export declare class ChatModel<CustomCtx extends Model.Ctx = Model.Ctx> extends AbstractModel<Model.Chat.Client, Model.Chat.Config, Model.Chat.Run, Model.Chat.Response, Model.Chat.ApiResponse, CustomCtx> {
    modelType: "chat";
    modelProvider: "openai";
    constructor(args?: ChatModelArgs<CustomCtx>);
    protected runModel({ handleUpdate, requestOpts, ...params }: Model.Chat.Run & Model.Chat.Config, context: CustomCtx): Promise<Model.Chat.Response>;
    /** Clone the model and merge/override the given properties. */
    extend(args?: PartialChatModelArgs<CustomCtx>): this;
}
