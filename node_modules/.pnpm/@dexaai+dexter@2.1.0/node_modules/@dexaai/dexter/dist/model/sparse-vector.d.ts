import type { PartialDeep } from 'type-fest';
import { type Options as KYOptions } from 'ky';
import type { ModelArgs } from './model.js';
import { AbstractModel } from './model.js';
import type { Model } from './types.js';
import { type Prettify } from '../utils/helpers.js';
export type SparseVectorModelArgs<CustomCtx extends Model.Ctx> = Prettify<Omit<ModelArgs<Model.SparseVector.Client, Model.SparseVector.Config, Model.SparseVector.Run, Model.SparseVector.Response, CustomCtx>, 'client'> & {
    serviceUrl?: string;
}>;
export type PartialSparseVectorModelArgs<CustomCtx extends Model.Ctx> = Prettify<PartialDeep<Pick<SparseVectorModelArgs<Partial<CustomCtx>>, 'params'>> & Partial<Omit<SparseVectorModelArgs<Partial<CustomCtx>>, 'params'>>>;
export declare class SparseVectorModel<CustomCtx extends Model.Ctx = Model.Ctx> extends AbstractModel<Model.SparseVector.Client, Model.SparseVector.Config, Model.SparseVector.Run, Model.SparseVector.Response, Model.SparseVector.ApiResponse, CustomCtx> {
    modelType: "sparse-vector";
    modelProvider: "custom";
    serviceUrl: string;
    constructor(args: SparseVectorModelArgs<CustomCtx>);
    protected runModel({ requestOpts, ...params }: Model.SparseVector.Run & Model.SparseVector.Config, context: CustomCtx): Promise<Model.SparseVector.Response>;
    protected runSingle(params: {
        input: string;
        model: string;
        requestOpts?: {
            headers?: KYOptions['headers'];
        };
    }, context: CustomCtx): Promise<{
        vector: Model.SparseVector.Vector;
        tokens: {
            prompt: number;
            completion: number;
            total: number;
        };
    }>;
    /** Clone the model and merge/override the given properties. */
    extend(args?: PartialSparseVectorModelArgs<CustomCtx>): this;
}
