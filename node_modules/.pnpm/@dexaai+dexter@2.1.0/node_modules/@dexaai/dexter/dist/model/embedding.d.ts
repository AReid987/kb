import type { PartialDeep } from 'type-fest';
import type { SetOptional } from 'type-fest';
import type { ModelArgs } from './model.js';
import type { Model } from './types.js';
import { AbstractModel } from './model.js';
import { type Prettify } from '../utils/helpers.js';
export type EmbeddingModelArgs<CustomCtx extends Model.Ctx> = SetOptional<ModelArgs<Model.Embedding.Client, Model.Embedding.Config, Model.Embedding.Run, Model.Embedding.Response, CustomCtx>, 'client' | 'params'>;
export type PartialEmbeddingModelArgs<CustomCtx extends Model.Ctx> = Prettify<PartialDeep<Pick<EmbeddingModelArgs<Partial<CustomCtx>>, 'params'>> & Partial<Omit<EmbeddingModelArgs<Partial<CustomCtx>>, 'params'>>>;
type BulkEmbedder<CustomCtx extends Model.Ctx> = (params: Model.Embedding.Run & Model.Embedding.Config, context: CustomCtx) => Promise<Model.Embedding.Response>;
export declare class EmbeddingModel<CustomCtx extends Model.Ctx = Model.Ctx> extends AbstractModel<Model.Embedding.Client, Model.Embedding.Config, Model.Embedding.Run, Model.Embedding.Response, Model.Embedding.ApiResponse, CustomCtx> {
    modelType: "embedding";
    modelProvider: "openai";
    throttledModel: BulkEmbedder<CustomCtx>;
    constructor(args?: EmbeddingModelArgs<CustomCtx>);
    protected runModel({ requestOpts, ...params }: Model.Embedding.Run & Model.Embedding.Config, context: CustomCtx): Promise<Model.Embedding.Response>;
    /** Clone the model and merge/override the given properties. */
    extend(args?: PartialEmbeddingModelArgs<CustomCtx>): this;
}
export {};
