import type { PartialDeep } from 'type-fest';
import type { SetOptional } from 'type-fest';
import type { ModelArgs } from './model.js';
import type { Model } from './types.js';
import { AbstractModel } from './model.js';
import { type Prettify } from '../index.js';
export type CompletionModelArgs<CustomCtx extends Model.Ctx> = SetOptional<ModelArgs<Model.Completion.Client, Model.Completion.Config, Model.Completion.Run, Model.Completion.Response, CustomCtx>, 'client' | 'params'>;
export type PartialCompletionModelArgs<CustomCtx extends Model.Ctx> = Prettify<PartialDeep<Pick<CompletionModelArgs<Partial<CustomCtx>>, 'params'>> & Partial<Omit<CompletionModelArgs<Partial<CustomCtx>>, 'params'>>>;
export declare class CompletionModel<CustomCtx extends Model.Ctx = Model.Ctx> extends AbstractModel<Model.Completion.Client, Model.Completion.Config, Model.Completion.Run, Model.Completion.Response, Model.Completion.ApiResponse, CustomCtx> {
    modelType: "completion";
    modelProvider: "openai";
    constructor(args?: CompletionModelArgs<CustomCtx>);
    protected runModel({ requestOpts, ...params }: Model.Completion.Run & Model.Completion.Config, context: CustomCtx): Promise<Model.Completion.Response>;
    /** Clone the model and merge/override the given properties. */
    extend(args?: PartialCompletionModelArgs<CustomCtx>): this;
}
