const os = require('os');
const fs = require('fs');
const path = require('path');
const https = require('https');
const { spawn } = require('child_process');

const KEYGEN_ACCOUNT = 'custodian-dev';

function download(url, target, callback) {
  const file = fs.createWriteStream(target);
  const request = https
    .get(url, function (response) {
      response.pipe(file);

      if (response.statusCode < 200 || response.statusCode >= 400) {
        throw Error(
          `Error while downloading the cli (${response.statusCode}: ${response.statusMessage})`,
        );
      }

      // after download completed close filestream and unpack archived binary
      file.on('finish', () => {
        file.close();
        unpackCli(target, callback);
      });
    })
    .on('error', (err) => {
      throw Error(`Error while downloading the cli (${err.statusCode}: ${err.message})`);
    });
}

function runOne(command, args, callback) {
  let stderr = '';
  const exec = spawn(command, args, { shell: false });
  exec.stderr.on('data', (data) => {
    stderr = stderr.concat(data);
  });
  exec.on('exit', (exitCode) => {
    if (exitCode !== 0) {
      console.log(stderr);
      throw Error(`Failed to unpack the cli`);
    }
    callback();
  });
}

function unpackCli(target, callback) {
  const targetDir = target.split('/').slice(0, -1).join('/');
  const unpackedDir = path.join(targetDir, 'cli-bin');
  runOne('mkdir', [unpackedDir], () => {
    runOne('tar', ['-xzf', target, '-C', unpackedDir], () => {
      runOne('mv', [`${unpackedDir}/marzano`, `${targetDir}/marzano`], () => {
        runOne('rm', ['-rf', unpackedDir], () => {
          runOne('rm', [target], () => {
            callback();
          });
        });
      });
    });
  });
}

function writeManifest(installPath, release) {
  const manifest = {
    installPath: installPath,
    binaries: {
      marzano: {
        name: 'marzano',
        release: release,
      },
    },
  };
  const manifestPath = path.join(installPath, 'manifests.json');
  fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
}

function install() {
  const platform = os.platform() === 'darwin' ? 'macos' : 'linux';

  const dirName = __dirname;
  const installDir = path.join(dirName, '.install');

  const targetDir = path.join(installDir, 'bin');

  const targetPath = path.join(targetDir, `marzano`);
  const tempPath = path.join(targetDir, 'marzano.tmp');

  const exists = fs.existsSync(targetPath);
  if (exists) {
    console.log('grit already installed, aborting');
    return;
  }

  fs.mkdirSync(targetDir, { recursive: true });

  // delete pre-existing tmp file so the response.pipe in `download` doesn't append to it
  if (fs.existsSync(tempPath)) {
    fs.rmSync(tempPath);
  }

  const arch = os.arch();
  const fileName = 'marzano-' + platform + '-' + arch;

  const url = 'https://api.keygen.sh/v1/accounts/' + KEYGEN_ACCOUNT + '/artifacts/' + fileName;
  if (process.env.DEBUG) {
    console.log(url);
  }

  console.log(`Downloading cli from ${url}`);

  https.get(url, (res) => {
    if (res.statusCode !== 303 && !res.statusCode !== 200) {
      console.log('failed to download cli');
      throw Error(`Failed to download the cli binaries (${res.statusCode})`);
    }

    let data = '';
    res.on('data', (d) => {
      data = data.concat(d);
    });
    res.on('close', () => {
      const json = JSON.parse(data);
      const artifact = json.data.links.redirect;
      download(artifact, tempPath, () => {
        fs.chmodSync(targetPath, '755');
        writeManifest(installDir, json.data.relationships.release.data.id);

        console.log('cli installed');
      });
    });
  });
}

module.exports = {
  install: install,
};
